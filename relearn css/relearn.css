/* CSS Responsive */

* { /* applying to all element */
    box-sizing: border-box;
}

/* BOX SIZING 
Box sizing allow us to include padding and border in an element total width and height 
width+padding+border=actual width of an element 
height+padding+border=actual height of an element

*/
.div1 {
    width: 100px ;
    height: 200px ;
    border: 1px solid blue;
    box-sizing: border-box; /* instruction to include the padding and border in an element total */
}

.div2 {
    width: 100px;
    height: 200px;
    padding: 50px;
    border: 1px solid red;
}

/* GRID VIEW 
We want to make 12 columns, so we calculate what is the percentage of one column 
100 / 12 = 8.33 %

Then we make a class for each column and determine the desired area (and multiple by 8.33 %)
*/

/* for mobile phone */
[class*="col-"] {
    width: 100%;}
    

/* "Mobile First" design: Always design for mobile phone first, then desktop */

@media only screen and (min-width: 600px) {
    @media only screen and (min-width: 600px) {

        /* For tablets: */
        .col-s-1 {
            width: 8.33%;
        }

        .col-s-2 {
            width: 16.66%;
        }

        .col-s-3 {
            width: 25%;
        }

        .col-s-4 {
            width: 33.33%;
        }

        .col-s-5 {
            width: 41.66%;
        }

        .col-s-6 {
            width: 50%;
        }

        .col-s-7 {
            width: 58.33%;
        }

        .col-s-8 {
            width: 66.66%;
        }

        .col-s-9 {
            width: 75%;
        }

        .col-s-10 {
            width: 83.33%;
        }

        .col-s-11 {
            width: 91.66%;
        }

        .col-s-12 {
            width: 100%;
        }
    }
}

@media only screen and (min-width: 768px) {
    /* for desktop */
    .col-1 {
        width: 8.33%;
    }

    .col-2 {
        width: 16.66%;
    }

    .col-3 {
        width: 25%;
    }

    .col-4 {
        width: 33.33%;
    }

    .col-5 {
        width: 41.66%;
    }

    .col-6 {
        width: 50%;
    }

    .col-7 {
        width: 58.33%;
    }

    .col-8 {
        width: 66.66%;
    }

    .col-9 {
        width: 75%;
    }

    .col-10 {
        width: 83.33%;
    }

    .col-11 {
        width: 91.66%;
    }

    .col-12 {
        width: 100%;
    }
}

/*/* Extra small devices (phones, 600px and down) */
/* @media only screen and (max-width: 600px) {
    ...
} */

/* Small devices (portrait tablets and large phones, 600px and up) */
/* @media only screen and (min-width: 600px) {
    ...
} */

/* Medium devices (landscape tablets, 768px and up) */
/* @media only screen and (min-width: 768px) {
    ...
} */

/* Large devices (laptops/desktops, 992px and up) */
/*@media only screen and (min-width: 992px) {
    ...
} */

/* Extra large devices (large laptops and desktops, 1200px and up) */
/* @media only screen and (min-width: 1200px) {
    ...
}*/



/* APPLY ORIENTATION: LANDSCAPE / PORTRAIT 
Media queries can also be used to change layout of a page depending on the orientation of the browser. 
You can have a set of CSS properties that will only apply when the browser window is wider than its height,
a so called "Landscape"orientation:
*/

@media only screen and (orientation: landscape){
    body {
        background-color: rebeccapurple;
    }
}



/* HIDE ELEMENTS */
/* If the screen size is 600px wide or less, hide the element */
@media only screen and (max-width: 600px) {
    div.example {
        display: none;
    }
}



/* CHANGE FONT SIZE */
/* If the screen size is 601px or more, set the font-size of <div> to 80px */
@media only screen and (min-width: 601px) {
    div.example {
        font-size: 80px;
    }
}

/* If the screen size is 600px or less, set the font-size of <div> to 30px */
@media only screen and (max-width: 600px) {
    div.example {
        font-size: 30px;
    }
}



/* Responsive Image */
img {
    max-width: 100%; /* if it is width instead of max-width, it can be scaled up to be
    larger than its original size */
    height: auto;
}

div {
    width: 100%;
    height: 400px;
    background-image: url('img_flowers.jpg');
    background-repeat: no-repeat;
    background-size: contain;
    border: 1px solid red;
    /* 
    1. If the background-size property is set to "contain",
    the background image will scale,
    and try to fit the content area. However,
    the image will keep its aspect ratio (the proportional relationship between the image's width and 
    height):
    2. If the background-size property is set to "100% 100%", the background image will stretch to 
    cover the entire content area
    3. If the background-size property is set to "cover",
    the background image will scale to cover the entire content area. 
    Notice that the "cover"value keeps the aspect ratio,
    and some part of the background image may be clipped:
    */
}



/* HTML Picture element 
set up in index*/


[class*="col-"] { /* [class*="col-"] to apply to all those class instantly */  
    float: left;
    padding: 15px;
    border: 1px solid red;
}

.row::after { /* a style class to clear the flow of the class row (see the html)*/
    content: "";
    clear: both;
    display: table;
}

html { /* apply to all html tag */
    font-family: "Courier New", monospace;
}

.header {
    background-color: blueviolet;
    color: white;
    padding: 15px;
}

.menu ul { /* add to tag unordered list in menu class */
    list-style-type: none;
    margin: 0;
    padding: 0;
}

.menu li {
    padding: 8px;
    margin-bottom: 7px;
    background-color: #33b535;
    color: #fff; 
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12),0 1px 2px rgba(0, 0, 0, 0.24);
}

.menu li:hover {
        background-color: #0099cc;
    }



/* CSS GRID
An HTML element becomes a grid container when its display property is set to grid or inline-grid.
All direct children of the grid container automatically become grid items.

Grid Spaces
The spaces between each column/row are called gaps. You can adjust the gap size by using one of the following properties:
grid-column-gap
grid-row-gap
grid-gap

Grid Lines
The lines between columns are called column lines.
The lines between rows are called row lines.
Refer to line numbers when placing a grid item in a grid container:
*/
.grid-container {
    display: grid;
    grid-gap: 50px 100px;
    grid-column-start: 1;
    grid-column-end: 3;
}
